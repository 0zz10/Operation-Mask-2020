# -*- coding: utf-8 -*-
"""temperature_iot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VoW2Fpan6gNmRX8HE9uD9uKHvmfPIT_K
"""

"""
A customized Temperature Reading on MLX90614, 
and Display the Object_Temperature on TM1637, 4-digit-led-display
security key: cvfinal34944-995ac7b590cc.json
path:/home/pi/4digitTime/cvfinal34944-995ac7b590cc.json
"""

import sys
import time
import datetime
import RPi.GPIO as GPIO
import tm1637
import json
from google.cloud import pubsub
from oauth2client.client import GoogleCredentials
from tendo import singleton

me = singleton.SingleInstance() # will sys.exit(-1) if other instance is running
SEND_INTERVAL = 1 #seconds
credentials = GoogleCredentials.get_application_default()

#Project ID
project="cvfinal34944"
#PubSub topic name
topic = "projects/cvfinal34944/topics/op-mask_2020"


#CLK -> GPIO23 (Pin 16)
#Di0 -> GPIO24 (Pin 18)
Display = tm1637.TM1637(23,24,tm1637.BRIGHT_TYPICAL)
Display.Clear()
Display.SetBrightnes(3)

from mlx90614 import MLX90614
thermometer_address = 0x5a
thermometer = MLX90614(thermometer_address)
temp_read = thermometer.get_obj_temp()
#currenttemp=[ int(temp_read / 10), int(temp_read % 10), 0, C ]

def createJSON(temperature, timestamp):
    data = {
      'Object_Temperature' : temperature,
      'timecollected' : timestamp,
    }

    json_str = json.dumps(data)
    return json_str

def main():
  publisher = pubsub.PublisherClient()  
  topicName = 'projects/' + project + '/topics/' + topic
  last_checked = 0
  while(True):
    if time.time() - last_checked > SEND_INTERVAL:
      last_checked = time.time()
      
      #now = datetime.datetime.now()
      temp_read = thermometer.get_obj_temp()
      temp_read = round(temp_read, 2) 
      currentTime = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
      s = ", "
      a=int(temp_read / 10)
      b=int(temp_read % 10)
      c=int((temp_read*10) % 10)
      d=int((temp_read*100) % 10)
    #print float(temp_read)
      currenttemp=[ a, b, c, d]
    #hour = now.hour
    #minute = now.minute
    #second = now.second
    #currenttime = [ int(hour / 10), hour % 10, int(minute / 10), minute % 10 ]
      Display.Show(currenttemp)
      #Display.ShowDoublepoint(second%2)

      tempJSON = createJSON(temp_read, currentTime)
      try:
          publisher.publish(topicName, tempJSON, placeholder='')
          print tempJSON
      except:
          print "There was an error publishing temperature data."
    time.sleep(1)
   

if __name__ == '__main__':
    main()